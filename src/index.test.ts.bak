import { greet, createCli } from './index';

// Mock console.log to capture output
const originalConsoleLog = console.log;
let consoleOutput: string[] = [];

// Create named mocks we can access for verification
const nameMock = jest.fn().mockReturnThis();
const descriptionMock = jest.fn().mockReturnThis();
const versionMock = jest.fn().mockReturnThis();
const commandMock = jest.fn().mockReturnThis();
const actionMock = jest.fn().mockReturnThis();
const commandDescriptionMock = jest.fn().mockReturnThis();
const commandActionMock = jest.fn();

// Mock commander
jest.mock('commander', () => {
	// Create a function that returns the mock object to avoid initialization issues
	function createMockProgram() {
		return {
			name: nameMock,
			description: descriptionMock,
			version: versionMock,
			command: commandMock,
			action: actionMock,
			parse: jest.fn(),
		};
	}

	// Set up the command mock to return another mock object
	commandMock.mockImplementation(() => ({
		description: commandDescriptionMock,
		action: commandActionMock,
	}));

	return { 
		Command: jest.fn().mockImplementation(() => createMockProgram()) 
	};
});

beforeEach(() => {
	consoleOutput = [];
	console.log = jest.fn((message) => {
		consoleOutput.push(message);
	});
	
	// Reset all mocks
	nameMock.mockClear();
	descriptionMock.mockClear();
	versionMock.mockClear();
	commandMock.mockClear();
	actionMock.mockClear();
	commandDescriptionMock.mockClear();
	commandActionMock.mockClear();
});

afterEach(() => {
	console.log = originalConsoleLog;
});

describe('greet function', () => {
	it('should output "Hello World"', () => {
		greet();
		expect(consoleOutput).toContain('Hello World');
	});
});

describe('createCli function', () => {
	it('should create and configure a CLI program', () => {
		createCli();
		
		// Verify program configuration
		expect(nameMock).toHaveBeenCalled();
		expect(descriptionMock).toHaveBeenCalled();
		expect(versionMock).toHaveBeenCalled();
		expect(commandMock).toHaveBeenCalledWith('greet');
		expect(actionMock).toHaveBeenCalled();
	});
});
